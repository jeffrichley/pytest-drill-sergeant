"""Persona system models for feedback generation."""

from __future__ import annotations

from datetime import datetime

from pydantic import BaseModel, ConfigDict, Field

from pytest_drill_sergeant.core.models import Finding, ResultData, Severity


class MessageTemplate(BaseModel):
    """Template for generating persona messages."""

    template_id: str = Field(..., description="Unique identifier for this template")
    persona: str = Field(..., description="Persona this template belongs to")
    context: str = Field(..., description="Context where this template is used")

    # Template content
    subject: str | None = Field(None, description="Subject line template")
    message: str = Field(..., description="Message template with placeholders")
    emoji: str | None = Field(None, description="Emoji to use with this message")

    # Template variables
    variables: list[str] = Field(
        default_factory=list, description="Required variables for this template"
    )
    optional_variables: list[str] = Field(
        default_factory=list, description="Optional variables for this template"
    )

    # Styling
    color: str | None = Field(None, description="Color for terminal output")
    style: str | None = Field(None, description="Text style (bold, italic, etc.)")

    model_config = ConfigDict(
        validate_assignment=True,
    )


class PersonaConfig(BaseModel):
    """Configuration for a persona."""

    persona_id: str = Field(..., description="Unique identifier for this persona")
    name: str = Field(..., description="Display name of the persona")
    description: str = Field(..., description="Description of the persona")

    # Persona characteristics
    personality_traits: list[str] = Field(
        default_factory=list, description="Key personality traits"
    )
    communication_style: str = Field("direct", description="Communication style")
    humor_level: str = Field(
        "moderate", description="Level of humor: none, mild, moderate, high"
    )
    formality_level: str = Field(
        "casual", description="Formality level: formal, casual, very_casual"
    )

    # Message preferences
    use_emoji: bool = Field(True, description="Whether to use emojis in messages")
    use_color: bool = Field(
        True, description="Whether to use colors in terminal output"
    )
    max_message_length: int = Field(200, description="Maximum message length")

    # Feedback preferences
    severity_mapping: dict[Severity, str] = Field(
        default_factory=dict, description="Severity to tone mapping"
    )
    feedback_frequency: str = Field(
        "moderate", description="How often to provide feedback"
    )

    # Configuration
    enabled: bool = Field(True, description="Whether this persona is enabled")
    priority: int = Field(0, description="Priority for persona selection")

    model_config = ConfigDict(
        use_enum_values=True,
        validate_assignment=True,
    )


class PersonaMessage(BaseModel):
    """A message generated by a persona."""

    message_id: str = Field(..., description="Unique identifier for this message")
    persona: str = Field(..., description="Persona that generated this message")
    template_id: str = Field(..., description="Template used to generate this message")

    # Message content
    subject: str | None = Field(None, description="Message subject")
    content: str = Field(..., description="Message content")
    emoji: str | None = Field(None, description="Emoji used in the message")

    # Styling
    color: str | None = Field(None, description="Color for terminal output")
    style: str | None = Field(None, description="Text style")

    # Context
    context: str = Field(..., description="Context where this message was generated")
    test_name: str | None = Field(None, description="Test name if applicable")
    finding: Finding | None = Field(
        None, description="Finding that triggered this message"
    )

    # Metadata
    generated_at: datetime = Field(
        default_factory=datetime.now, description="When this message was generated"
    )
    variables_used: dict[str, str | int | float | bool] = Field(
        default_factory=dict, description="Variables used in template"
    )

    model_config = ConfigDict(
        validate_assignment=True,
    )


class PersonaFeedback(BaseModel):
    """Feedback generated by a persona for a test result."""

    feedback_id: str = Field(..., description="Unique identifier for this feedback")
    persona: str = Field(..., description="Persona that generated this feedback")
    test_result: ResultData = Field(..., description="Test result this feedback is for")

    # Feedback messages
    messages: list[PersonaMessage] = Field(
        default_factory=list, description="Feedback messages"
    )

    # Feedback summary
    overall_tone: str = Field("neutral", description="Overall tone of the feedback")
    encouragement_level: int = Field(
        0, ge=0, le=10, description="Level of encouragement (0-10)"
    )
    criticism_level: int = Field(
        0, ge=0, le=10, description="Level of criticism (0-10)"
    )

    # Action items
    action_items: list[str] = Field(
        default_factory=list, description="Action items suggested"
    )
    priority_level: str = Field("medium", description="Priority level of the feedback")

    # Metadata
    generated_at: datetime = Field(
        default_factory=datetime.now, description="When this feedback was generated"
    )
    processing_time: float = Field(0.0, description="Time taken to generate feedback")

    model_config = ConfigDict(
        validate_assignment=True,
    )


class PersonaSummary(BaseModel):
    """Summary of persona feedback for a test run."""

    summary_id: str = Field(..., description="Unique identifier for this summary")
    persona: str = Field(..., description="Persona that generated this summary")
    run_id: str = Field(..., description="Test run identifier")

    # Summary content
    title: str = Field(..., description="Summary title")
    content: str = Field(..., description="Summary content")
    emoji: str | None = Field(None, description="Emoji for the summary")

    # Statistics
    total_tests: int = Field(0, description="Total number of tests")
    tests_with_feedback: int = Field(0, description="Number of tests with feedback")
    total_findings: int = Field(0, description="Total number of findings")
    findings_by_severity: dict[Severity, int] = Field(
        default_factory=dict, description="Findings by severity"
    )

    # Quality metrics
    average_bis: float = Field(0.0, ge=0.0, le=100.0, description="Average BIS score")
    brs_score: float = Field(0.0, ge=0.0, le=100.0, description="BRS score")
    quality_grade: str = Field("F", description="Overall quality grade")

    # Recommendations
    top_recommendations: list[str] = Field(
        default_factory=list, description="Top recommendations"
    )
    celebration_points: list[str] = Field(
        default_factory=list, description="Points to celebrate"
    )
    improvement_areas: list[str] = Field(
        default_factory=list, description="Areas for improvement"
    )

    # Styling
    color: str | None = Field(None, description="Color for terminal output")
    style: str | None = Field(None, description="Text style")

    # Metadata
    generated_at: datetime = Field(
        default_factory=datetime.now, description="When this summary was generated"
    )

    model_config = ConfigDict(
        use_enum_values=True,
        validate_assignment=True,
    )


class PersonaRegistry(BaseModel):
    """Registry of available personas."""

    personas: dict[str, PersonaConfig] = Field(
        default_factory=dict, description="Available personas"
    )
    default_persona: str = Field("drill_sergeant", description="Default persona to use")

    # Template management
    templates: dict[str, MessageTemplate] = Field(
        default_factory=dict, description="Message templates"
    )

    # Registry metadata
    created_at: datetime = Field(
        default_factory=datetime.now, description="When this registry was created"
    )
    last_updated: datetime = Field(
        default_factory=datetime.now, description="When this registry was last updated"
    )

    model_config = ConfigDict(
        validate_assignment=True,
    )

    def register_persona(self, persona: PersonaConfig) -> None:
        """Register a new persona."""
        self.personas[persona.persona_id] = persona
        self.last_updated = datetime.now()

    def get_persona(self, persona_id: str) -> PersonaConfig | None:
        """Get a persona by ID."""
        return self.personas.get(persona_id)

    def list_personas(self) -> list[PersonaConfig]:
        """List all available personas."""
        return list(self.personas.values())

    def register_template(self, template: MessageTemplate) -> None:
        """Register a new message template."""
        self.templates[template.template_id] = template
        self.last_updated = datetime.now()

    def get_templates_for_persona(self, persona_id: str) -> list[MessageTemplate]:
        """Get all templates for a specific persona."""
        return [
            template
            for template in self.templates.values()
            if template.persona == persona_id
        ]
